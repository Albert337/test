from tensorflow.examples.tutorials.mnist import input_data
import tensorflow as tf

mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)
with tf.variable_scope('Inputs'):
    x = tf.placeholder(tf.float32, [None, 784])
    y_ = tf.placeholder(tf.float32, [None, 10])


def weight_variable(shape):
    initial = tf.truncated_normal(shape,stddev = 0.1)
    return tf.Variable(initial)

def bias_variable(shape):
    initial = tf.constant(0.1,shape = shape)
    return tf.Variable(initial)

def conv2d(x,W):
    return tf.nn.conv2d(x, W, strides = [1,1,1,1], padding = 'SAME')

def max_pool_2x2(x):
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1],padding='VALID')

with tf.variable_scope('Net'):
    W_conv1 = weight_variable([3, 3, 1, 32])
    b_conv1 = bias_variable([32])
    x_image = tf.reshape(x,[-1,28,28,1])/255
    h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1) + b_conv1)
    h_pool1 = max_pool_2x2(h_conv1)

    W_conv2 = weight_variable([3, 3, 32, 64])
    b_conv2 = bias_variable([64])
    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)
    h_pool2 = max_pool_2x2(h_conv2)

    W_fc1 = weight_variable([7 * 7 * 64, 1024])
    b_fc1 = bias_variable([1024])
    h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])
    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

    W_fc2 = weight_variable([1024, 10])
    b_fc2 = bias_variable([10])
    y_conv=tf.nn.softmax(tf.matmul(h_fc1, W_fc2) + b_fc2)

    # add to histogram summary
    tf.summary.histogram('out', y_conv)

loss = -tf.reduce_sum(y_*tf.log(y_conv))
tf.summary.scalar('loss', loss)
train_step = tf.train.AdamOptimizer(1e-3).minimize(loss)
correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))
tf.summary.scalar('acc', accuracy)


with tf.Session() as sess:
    # sess.run(tf.global_variables_initializer())
    init_op = tf.group(tf.global_variables_initializer(), tf.local_variables_initializer()) # the local var is for accuracy_op
    sess.run(init_op)

    writer = tf.summary.FileWriter('./log', sess.graph)  # write to file
    merge_op = tf.summary.merge_all()

    for epoch in range(5000):
        batch = mnist.train.next_batch(100)
        if epoch % 50 == 0:
            train_accuracy = accuracy.eval(feed_dict={ x: batch[0], y_: batch[1]})
            train_loss=loss.eval(feed_dict={ x: batch[0], y_: batch[1]})
            print('step %d, training accuracy %g,training loss %g' % (epoch, train_accuracy,train_loss))
        _, result=sess.run([train_step,merge_op],feed_dict={x: batch[0], y_: batch[1]})
        writer.add_summary(result, epoch)
    print('test accuracy %g' % accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels}))
